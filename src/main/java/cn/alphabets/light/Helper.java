package cn.alphabets.light;

import org.apache.commons.lang3.math.NumberUtils;
import org.bson.Document;
import org.jtwig.JtwigModel;
import org.jtwig.JtwigTemplate;
import org.jtwig.environment.Environment;
import org.jtwig.environment.EnvironmentConfiguration;
import org.jtwig.environment.EnvironmentConfigurationBuilder;
import org.jtwig.environment.EnvironmentFactory;
import org.jtwig.functions.FunctionRequest;
import org.jtwig.functions.SimpleJtwigFunction;
import org.jtwig.resource.reference.ResourceReference;

import java.io.UnsupportedEncodingException;
import java.lang.reflect.Field;
import java.net.URLDecoder;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Helper
 */
public class Helper {

    /**
     * Set the system environment variables
     *
     * @param newEnv environment
     */
    @SuppressWarnings("unchecked")
    public static void setEnv(Map<String, String> newEnv) {
        Class[] classes = Collections.class.getDeclaredClasses();
        Map<String, String> env = System.getenv();
        for (Class cl : classes) {
            if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) {
                try {
                    Field field = cl.getDeclaredField("m");
                    field.setAccessible(true);
                    Map<String, String> map = (Map<String, String>) field.get(env);
                    map.clear();
                    map.putAll(newEnv);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        }
    }

    public static void setEnv(String key, String value) {
        Map<String, String> env = new ConcurrentHashMap<String, String>() {{
            put(key, value);
        }};

        Helper.setEnv(env);
    }

    /**
     * Use Json Path to set the value of the Json object. Supports embedded objects
     *
     * @param source target json object
     * @param path   json path
     * @param val    value
     */
    @SuppressWarnings("unchecked")
    public static void setValueByJsonPath(Document source, List<String> path, Object val) {

        Object parent = source;

        for (int i = 0; i < path.size(); i++) {

            String key = path.get(i);
            boolean isLast = (i == path.size() - 1);

            if (isLast) {
                boolean isList = key.equals("") || NumberUtils.isDigits(key);
                if (isList) {
                    ((List<Object>) parent).add(val);
                } else {
                    ((Document) parent).put(key, val);
                }
                return;
            }

            boolean isListValue = path.get(i + 1).equals("") || NumberUtils.isDigits(path.get(i + 1));
            boolean isObjectValue = !isListValue;

            if (NumberUtils.isDigits(key)) {

                if (((List<?>) parent).size() > Integer.parseInt(key)) {
                    parent = ((List<?>) parent).get(Integer.parseInt(key));
                } else {
                    if (isListValue) {
                        ((List<Object>) parent).add(new ArrayList<>());
                    }
                    if (isObjectValue) {
                        ((List<Document>) parent).add(new Document());
                    }
                    parent = ((List<?>) parent).get(Integer.parseInt(key));
                }
            } else {

                if (((Document) parent).containsKey(key)) {
                    parent = ((Document) parent).get(key);
                } else {
                    if (isListValue) {
                        ((Document) parent).put(key, new ArrayList<>());
                    }
                    if (isObjectValue) {
                        ((Document) parent).put(key, new Document());
                    }
                    parent = ((Document) parent).get(key);
                }
            }
        }
    }

    /**
     * Deserializes the JSON generated by JQuery.param() method
     *
     * @param url full request url
     * @return Json Object
     */
    public static Document unParam(String url) {

        String decoded;
        Pattern pattern = Pattern.compile("\\[([^\\]]*)\\]");

        try {
            url = url.contains("?") ? url.substring(url.indexOf("?") + 1) : url;
            decoded = URLDecoder.decode(url, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }

        final Document json = new Document();

        Arrays.stream(decoded.split("&")).forEach(keyVal -> {

            String[] splitted = keyVal.split("=");
            String key = splitted[0];
            String val = splitted.length > 1 ? splitted[1] : "";

            List<String> path = new ArrayList<>();
            path.add(key.indexOf("[") > 0 ? key.substring(0, key.indexOf("[")) : key);

            Matcher m = pattern.matcher(key);
            while (m.find()) {
                path.add(m.group(1));
            }

            Helper.setValueByJsonPath(json, path, val);
        });

        return json;
    }

    /**
     * Use the template file to generate a string
     *
     * @param name     resource name
     * @param model    parameters
     * @param function custom functions
     * @return The resulting string
     */
    public static String loadTemplate(String name, Map<String, Object> model, List<SimpleJtwigFunction> function) {

        EnvironmentConfiguration configuration = EnvironmentConfigurationBuilder
                .configuration()
                .functions()
                .add(function)
                .and()
                .parser()
                .syntax()
                .withStartCode("<%~").withEndCode("%>")
                .withStartOutput("<%=").withEndOutput("%>")
                .withStartComment("<#").withEndComment("#>")
                .and()
                .and()
                .build();

        Environment environment = new EnvironmentFactory().create(configuration);
        ResourceReference resource = new ResourceReference(ResourceReference.CLASSPATH, name);

        return new JtwigTemplate(environment, resource).render(JtwigModel.newModel(model));
    }

    public static class StringFunction extends SimpleJtwigFunction {

        private String name;
        Function<List<Object>, String> function;

        public StringFunction(String name, Function<List<Object>, String> function) {
            this.name = name;
            this.function = function;
        }

        @Override
        public String name() {
            return this.name;
        }

        @Override
        public Object execute(FunctionRequest request) {
            return this.function.apply(request.getArguments());
        }
    }

    public static class ListFunction extends SimpleJtwigFunction {

        private String name;
        Function<List<Object>, List<String>> function;

        public ListFunction(String name, Function<List<Object>, List<String>> function) {
            this.name = name;
            this.function = function;
        }

        @Override
        public String name() {
            return this.name;
        }

        @Override
        public Object execute(FunctionRequest request) {
            return this.function.apply(request.getArguments());
        }
    }

    public static class MapFunction extends SimpleJtwigFunction {

        private String name;
        Function<List<Object>, Map<String, String>> function;

        public MapFunction(String name, Function<List<Object>, Map<String, String>> function) {
            this.name = name;
            this.function = function;
        }

        @Override
        public String name() {
            return this.name;
        }

        @Override
        public Object execute(FunctionRequest request) {
            return this.function.apply(request.getArguments());
        }
    }
}
